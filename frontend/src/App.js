import React, { useState, useContext } from 'react';
import axios from 'axios';
import { ScrollMenu, VisibilityContext } from 'react-horizontal-scrolling-menu';
import 'react-horizontal-scrolling-menu/dist/styles.css';

import { 
  FaCubes, FaFlask, FaNewspaper, FaChartLine, FaBrain, FaChevronLeft, FaChevronRight, 
  FaGasPump, FaLeaf, FaSeedling, FaIndustry, FaCube, FaCoins, 
  FaExpand, FaCompress, FaDownload, FaFilePdf
} from 'react-icons/fa';
import './App.css';
import PriceChart from './components/PriceChart';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

const commodityMap = {
  "Copper": { icon: FaCube, name: "Copper" },
  "Crude Oil": { icon: FaGasPump, name: "Crude Oil" },
  "Gold": { icon: FaCoins, name: "Gold" },
  "Natural Gas": { icon: FaGasPump, name: "Natural Gas" },
  "Steel": { icon: FaIndustry, name: "Steel" },
  "Aluminum": { icon: FaCubes, name: "Aluminum" },
  "Silver": { icon: FaCoins, name: "Silver" }
};
const commodities = Object.keys(commodityMap);

function App() {
  const [selectedCommodity, setSelectedCommodity] = useState('');
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [fullscreenQuadrant, setFullscreenQuadrant] = useState(null);
  const [downloading, setDownloading] = useState(false);
  const reportRef = React.useRef(null);

  const toggleFullscreen = (quadrant) => {
    if (fullscreenQuadrant === quadrant) {
      setFullscreenQuadrant(null);
    } else {
      setFullscreenQuadrant(quadrant);
    }
  };

  const downloadReport = async () => {
    if (!report || downloading) return;
    
    setDownloading(true);
    
    try {
      const reportElement = reportRef.current;
      const canvas = await html2canvas(reportElement, {
        scale: 2,
        logging: false,
        useCORS: true,
        backgroundColor: '#0D1117'
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
        compress: true
      });
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
      const imgX = (pdfWidth - imgWidth * ratio) / 2;
      const imgY = 30;
      
      // Add title
      pdf.setFillColor(13, 17, 23);
      pdf.rect(0, 0, pdfWidth, pdfHeight, 'F');
      pdf.setTextColor(230, 237, 243);
      pdf.setFontSize(24);
      pdf.text('ProcureIQ Report', pdfWidth / 2, 15, { align: 'center' });
      
      // Add subtitle with date
      pdf.setFontSize(12);
      pdf.text(`${selectedCommodity} - ${new Date().toLocaleDateString()}`, pdfWidth / 2, 22, { align: 'center' });
      
      // Add screenshot
      pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
      
      // Add text data
      const textY = imgY + imgHeight * ratio + 10;
      pdf.setFontSize(14);
      pdf.text('Procurement Recommendation:', 14, textY);
      pdf.setFontSize(12);
      pdf.text(report.recommendation_summary, 14, textY + 8, { 
        maxWidth: pdfWidth - 28,
        lineHeightFactor: 1.5
      });
      
      // Add news headlines
      const newsY = textY + 40;
      pdf.setFontSize(14);
      pdf.text('Recent News Headlines:', 14, newsY);
      pdf.setFontSize(10);
      
      report.recent_news.forEach((news, index) => {
        pdf.text(`${index + 1}. ${news}`, 14, newsY + 8 + (index * 6), { 
          maxWidth: pdfWidth - 28
        });
      });
      
      // Add footer
      pdf.setFontSize(10);
      pdf.text('Generated by ProcureIQ - AI-Powered Procurement Intelligence', pdfWidth / 2, pdfHeight - 10, { align: 'center' });
      
      // Save the PDF
      pdf.save(`ProcureIQ-${selectedCommodity}-${new Date().toLocaleDateString().replace(/\//g, '-')}.pdf`);
    } catch (err) {
      console.error('Error generating PDF:', err);
    } finally {
      setDownloading(false);
    }
  };

  const handleAnalyze = async (commodity) => {
    if (loading) return;
    setSelectedCommodity(commodity);
    setLoading(true);
    setError('');
    setReport(null);
    try {
      const response = await axios.post('http://127.0.0.1:8000/procurement-analysis', { commodity });
      setReport(response.data);
    } catch (err) {
      setError(err.response?.data?.detail || 'An unexpected error occurred.');
    }
    setLoading(false);
  };

  return (
    <div className="App">
      <header className="header">
        <h1><FaCubes /> ProcureIQ</h1>
        <p>AI-Powered Procurement Intelligence for Industrial Commodities</p>
      </header>

      <CommoditySelector selected={selectedCommodity} onSelect={handleAnalyze} />

      {loading && <LoadingSpinner />}
      {error && <p className="error-message">Error: {error}</p>}
      {report && (
        <React.Fragment>
          <div className="download-report-container">
            <button 
              className={`download-report-button ${downloading ? 'downloading' : ''}`}
              onClick={downloadReport}
              disabled={downloading}
            >
              {downloading ? (
                <React.Fragment>
                  <div className="button-spinner"></div>
                  <span>Generating PDF...</span>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <FaFilePdf />
                  <span>Download Report</span>
                </React.Fragment>
              )}
            </button>
          </div>
          <div className="quadrant-layout" ref={reportRef}>
            {/* Top Left Quadrant - Recommendation */}
            <div className={`quadrant recommendation-quadrant ${fullscreenQuadrant === 'recommendation' ? 'fullscreen' : ''}`}>
            <button 
              className="fullscreen-toggle" 
              onClick={() => toggleFullscreen('recommendation')}
              aria-label={fullscreenQuadrant === 'recommendation' ? 'Exit fullscreen' : 'Enter fullscreen'}
            >
              {fullscreenQuadrant === 'recommendation' ? <FaCompress /> : <FaExpand />}
            </button>
            <h2 className="card-title"><FaFlask /> Procurement Recommendation</h2>
            <div className="quadrant-content">
              <p className={`recommendation-text ${report.recommendation_summary.toLowerCase().includes('procure') ? 'recommendation-procure' : 'recommendation-wait'}`}>
                <strong>{report.recommendation_summary.toLowerCase().includes('procure') ? 'PROCURE NOW' : 'WAIT'}</strong>
                <br />
                {report.recommendation_summary}
              </p>
            </div>
          </div>

            {/* Top Right Quadrant - Price Forecast */}
            <div className={`quadrant forecast-quadrant ${fullscreenQuadrant === 'forecast' ? 'fullscreen' : ''}`}>
            <button 
              className="fullscreen-toggle" 
              onClick={() => toggleFullscreen('forecast')}
              aria-label={fullscreenQuadrant === 'forecast' ? 'Exit fullscreen' : 'Enter fullscreen'}
            >
              {fullscreenQuadrant === 'forecast' ? <FaCompress /> : <FaExpand />}
            </button>
            <h2 className="card-title"><FaChartLine /> 60-Day Price Forecast</h2>
            <div className="quadrant-content chart-container">
              <PriceChart historical={report.historical_prices} forecast={report.forecasted_prices} />
            </div>
          </div>

            {/* Bottom Left Quadrant - AI Insight */}
            <div className={`quadrant insight-quadrant ${fullscreenQuadrant === 'insight' ? 'fullscreen' : ''}`}>
            <button 
              className="fullscreen-toggle" 
              onClick={() => toggleFullscreen('insight')}
              aria-label={fullscreenQuadrant === 'insight' ? 'Exit fullscreen' : 'Enter fullscreen'}
            >
              {fullscreenQuadrant === 'insight' ? <FaCompress /> : <FaExpand />}
            </button>
            <h2 className="card-title"><FaBrain /> AI Insight Summary</h2>
            <div className="quadrant-content scrollable">
              {report.qualitative_research.split('\n\n').map((paragraph, index) => (
                <p key={index} style={{ marginBottom: '1rem' }}>{paragraph}</p>
              ))}
            </div>
          </div>

            {/* Bottom Right Quadrant - News */}
            <div className={`quadrant news-quadrant ${fullscreenQuadrant === 'news' ? 'fullscreen' : ''}`}>
            <button 
              className="fullscreen-toggle" 
              onClick={() => toggleFullscreen('news')}
              aria-label={fullscreenQuadrant === 'news' ? 'Exit fullscreen' : 'Enter fullscreen'}
            >
              {fullscreenQuadrant === 'news' ? <FaCompress /> : <FaExpand />}
            </button>
            <h2 className="card-title"><FaNewspaper /> Recent News</h2>
            <div className="quadrant-content scrollable">
              <ul className="news-list">
                {report.recent_news.map((news, index) => (
                  <li key={index}>
                    <div className="news-item">
                      <span className="news-number">{index + 1}.</span>
                      <span className="news-content">{news}</span>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          </div>
        </React.Fragment>
      )}
    </div>
  );
}

const LoadingSpinner = () => (
  <div className="spinner-container">
    <div className="spinner"></div>
    <span>Engaging AI agents... Please wait.</span>
  </div>
);


const CommoditySelector = ({ selected, onSelect }) => (
  <div className="commodity-selector-container">
    <ScrollMenu LeftArrow={LeftArrow} RightArrow={RightArrow}>
      {commodities.map((name) => (
        <div
          className={`commodity-card ${name === selected ? 'selected' : ''}`}
          key={name}
          onClick={() => onSelect(name)}
          tabIndex={0}
        >
          {React.createElement(commodityMap[name].icon, { className: 'commodity-icon' })}
          <span>{commodityMap[name].name}</span>
        </div>
      ))}
    </ScrollMenu>
  </div>
);

function LeftArrow() {
  const { isFirstItemVisible, scrollPrev } = useContext(VisibilityContext);
  return (
    <div className={`arrow ${isFirstItemVisible ? 'disabled' : ''}`} onClick={() => scrollPrev()}>
      <FaChevronLeft />
    </div>
  );
}

function RightArrow() {
  const { isLastItemVisible, scrollNext } = useContext(VisibilityContext);
  return (
    <div className={`arrow ${isLastItemVisible ? 'disabled' : ''}`} onClick={() => scrollNext()}>
      <FaChevronRight />
    </div>
  );
}



export default App;
